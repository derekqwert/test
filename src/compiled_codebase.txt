 
--- Start of D:\Proj\react-table\src\App.css --- 
.App {
  text-align: center;
  height: 100vh;
  background-color: #bde0fe;
}

.heading {
  font-family: Delius;
  font-size: 2.8em;
  padding: 2vh 0;
} 
--- End of D:\Proj\react-table\src\App.css --- 
 
--- Start of D:\Proj\react-table\src\App.js --- 
import React, { useContext } from "react";
import { UserProvider, UserContext } from "./contexts/UserContext";
import Login from "./components/Login";
import Register from "./components/Register";
import Store from "./components/Store";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import "./App.css";
import ErrorBoundary from "./utils/Errorboundry";

function App() {
  return (
    <ErrorBoundary>
      <UserProvider>
        <Router>
          <div className="App">
            <Routes>
              <Route path="/" element={<Login />} />
              <Route path="/register" element={<Register />} />
              <Route
                path="/store"
                element={
                  <ProtectedRoute>
                    <Store />
                  </ProtectedRoute>
                }
              />
            </Routes>
          </div>
        </Router>
      </UserProvider>
    </ErrorBoundary>
  );
}

const ProtectedRoute = ({ children }) => {
  const { username } = useContext(UserContext);

  if (!username) {
    return <Navigate to="/" replace />;
  }

  return children;
};

export default App;
 
--- End of D:\Proj\react-table\src\App.js --- 
 
--- Start of D:\Proj\react-table\src\compiled_codebase.txt --- 
 
--- Start of D:\Proj\react-table\src\App.css --- 
.App {
  text-align: center;
  height: 100vh;
  background-color: #bde0fe;
}

.heading {
  font-family: Delius;
  font-size: 2.8em;
  padding: 2vh 0;
} 
--- End of D:\Proj\react-table\src\App.css --- 
 
--- Start of D:\Proj\react-table\src\App.js --- 
import React, { useContext } from "react";
import { UserProvider, UserContext } from "./contexts/UserContext";
import Login from "./components/Login";
import Register from "./components/Register";
import Store from "./components/Store";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import "./App.css";
import ErrorBoundary from "./utils/Errorboundry";

function App() {
  return (
    <ErrorBoundary>
      <UserProvider>
        <Router>
          <div className="App">
            <Routes>
              <Route path="/" element={<Login />} />
              <Route path="/register" element={<Register />} />
              <Route
                path="/store"
                element={
                  <ProtectedRoute>
                    <Store />
                  </ProtectedRoute>
                }
              />
            </Routes>
          </div>
        </Router>
      </UserProvider>
    </ErrorBoundary>
  );
}

const ProtectedRoute = ({ children }) => {
  const { username } = useContext(UserContext);

  if (!username) {
    return <Navigate to="/" replace />;
  }

  return children;
};

export default App;
 
--- End of D:\Proj\react-table\src\App.js --- 
 
--- Start of D:\Proj\react-table\src\compiled_codebase.txt --- 
 
--- Start of D:\Proj\react-table\src\App.css --- 
.App {
  text-align: center;
  height: 100vh;
  background-color: #bde0fe;
}

.heading {
  font-family: Delius;
  font-size: 2.8em;
  padding: 2vh 0;
} 
--- End of D:\Proj\react-table\src\App.css --- 
 
--- Start of D:\Proj\react-table\src\App.js --- 
import React, { useContext } from "react";
import { UserProvider, UserContext } from "./contexts/UserContext";
import Login from ". 
--- End of D:\Proj\react-table\src\compiled_codebase.txt --- 
 
--- Start of D:\Proj\react-table\src\index.css --- 
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
 
--- End of D:\Proj\react-table\src\index.css --- 
 
--- Start of D:\Proj\react-table\src\index.js --- 
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import 'bootstrap/dist/css/bootstrap.min.css'
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
 
--- End of D:\Proj\react-table\src\index.js --- 
 
--- Start of D:\Proj\react-table\src\new.bat --- 
@echo off

:: Output file name
set OUTPUT_FILE=compiled_codebase.txt

:: Directory to scan (use . for the current directory)
set DIRECTORY=.

:: Clear the output file if it exists
echo. > %OUTPUT_FILE%

echo Compiling code files into %OUTPUT_FILE%...

:: Loop through all files recursively in the directory
for /r "%DIRECTORY%" %%I in (*) do (
    if exist "%%I" (
        echo --- Start of %%I --- >> %OUTPUT_FILE%
        type "%%I" >> %OUTPUT_FILE%
        echo. >> %OUTPUT_FILE%
        echo --- End of %%I --- >> %OUTPUT_FILE%
        echo. >> %OUTPUT_FILE%
    ) else (
        echo Skipped: %%I (file not found)
    )
)

echo Compilation complete! Output saved to %OUTPUT_FILE%.
 
--- End of D:\Proj\react-table\src\new.bat --- 
 
--- Start of D:\Proj\react-table\src\components\DeleteModal.jsx --- 
import React from "react";
import { Modal, Button } from "react-bootstrap";

const DeleteModal = ({ show, handleClose, handleDelete, itemName }) => {
  return (
    <Modal show={show} onHide={handleClose} centered>
      <Modal.Header closeButton>
        <Modal.Title>Delete Confirmation ðŸ˜¨</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        Are you sure you want to delete <strong>{itemName}</strong>?
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={handleClose}>
          Cancel
        </Button>
        <Button variant="danger" onClick={handleDelete}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default DeleteModal;
 
--- End of D:\Proj\react-table\src\components\DeleteModal.jsx --- 
 
--- Start of D:\Proj\react-table\src\components\Header.jsx --- 
import React, { useContext } from "react";
import { UserContext } from "../contexts/UserContext";
import "../styles/Header.css";
import { Button } from "react-bootstrap";
import { useNavigate } from "react-router-dom";

const Header = () => {
  const { username, setUsername } = useContext(UserContext);
  const navigate = useNavigate();

  const throwError = () => {
    // throw new Error("There is an error ðŸ‘»â˜ ");
    throw ({'There is an error':'ðŸ‘»â˜ '})
  }

  const handleLogout = () => {
    setUsername("");
    navigate("/");
  };

  return (
    <div className="header-container">
      <span className="username">username: {username}</span>
      <div>
        <Button className="thr-err-btn" variant="danger" onClick={throwError}>
          Throw Error
        </Button>
        <Button className="logout-btn" variant="danger" onClick={handleLogout}>
          Log Out
        </Button>
      </div>
    </div>
  );
};

export default Header;
 
--- End of D:\Proj\react-table\src\components\Header.jsx --- 
 
--- Start of D:\Proj\react-table\src\components\ItemCount.jsx --- 
import React, { useReducer } from "react";
import { Button } from "react-bootstrap";

const initialState = 0;

const itemCountReducer = (state, action) => {
  switch (action.type) {
    case "increment":
      return state + 1;
    case "decrement":
      return state > 0 ? state - 1 : state;
    default:
      return state;
  }
};

const ItemCount = ({ onCountChange }) => {
  const [itemCount, dispatch] = useReducer(itemCountReducer, initialState);

  const handleCountChange = (type) => {
    const newCount =
      type === "increment" ? itemCount + 1 : Math.max(itemCount - 1, 0);
    dispatch({ type });
    onCountChange(newCount);
  };

  return (
    <div style={{ display: "flex", alignItems: "center", gap: "0.5rem" }}>
      <Button variant="success" onClick={() => handleCountChange("increment")}>
        +
      </Button>
      <span>{itemCount}</span>
      <Button variant="danger" onClick={() => handleCountChange("decrement")}>
        -
      </Button>
    </div>
  );
};

export default ItemCount;
 
--- End of D:\Proj\react-table\src\components\ItemCount.jsx --- 
 
--- Start of D:\Proj\react-table\src\components\ListTable.jsx --- 
import React, { useState, useEffect } from "react";
import axios from "axios";
import "../styles/ListTable.css";
import { Button, Table } from "react-bootstrap";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import ItemCount from "./ItemCount";
import DeleteModal from "./DeleteModal";

const ListTable = () => {
  const [storeData, setStoreData] = useState([]);
  const [itemCounts, setItemCounts] = useState({});
  const [showModal, setShowModal] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);

  useEffect(() => {
    displayData();
  }, []);

  const displayData = () => {
    axios
      .get("https://fakestoreapi.com/products?limit=5")
      .then((response) => {
        setStoreData(response.data);
        const initialCounts = response.data.reduce((acc, product) => {
          acc[product.id] = 0;
          return acc;
        }, {});
        setItemCounts(initialCounts);
      })
      .catch((error) => console.error(error));
  };

  const handleItemCountChange = (productId, count) => {
    setItemCounts((prevCounts) => ({ ...prevCounts, [productId]: count }));
  };

  const addToCart = (product) => {
    const count = itemCounts[product.id] || 0;
    if (count > 0) {
      toast.success(`Added ${count}x "${product.title}" to cart`, {
        position: "bottom-right",
        autoClose: 3000,
      });
    } else {
      toast.warning("Please select a quantity before adding to cart.", {
        position: "bottom-right",
        autoClose: 3000,
      });
    }
  };

  const handleShowModal = (product) => {
    setSelectedProduct(product);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setSelectedProduct(null);
    setShowModal(false);
  };

  const handleDelete = () => {
    if (selectedProduct) {
      setStoreData(storeData.filter((product) => product.id !== selectedProduct.id));
      toast.error(`Deleted "${selectedProduct.title}"`, {
        position: "bottom-right",
        autoClose: 3000,
      });
      handleCloseModal();
    }
  };

  return (
    <div className="container">
      <Table className="table" striped bordered hover>
        <thead>
          <tr>
            <th>Select</th>
            <th>Name</th>
            <th>Price</th>
            <th>Image</th>
            <th>Quantity</th>
            <th>Add to Cart</th>
            <th>Delete</th>
          </tr>
        </thead>
        <tbody>
          {storeData.map((product) => (
            <tr key={product.id}>
              <td>
                <input type="checkbox" />
              </td>
              <td>{product.title}</td>
              <td>{product.price}</td>
              <td>
                <img
                  className="product-image"
                  src={product.image}
                  alt={product.title}
                />
              </td>
              <td>
                <ItemCount
                  onCountChange={(count) =>
                    handleItemCountChange(product.id, count)
                  }
                />
              </td>
              <td>
                <Button variant="primary" onClick={() => addToCart(product)}>
                  Add
                </Button>
              </td>
              <td>
                <Button
                  variant="danger"
                  onClick={() => handleShowModal(product)}
                >
                  Delete
                </Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
      <DeleteModal
        show={showModal}
        handleClose={handleCloseModal}
        handleDelete={handleDelete}
        itemName={selectedProduct ? selectedProduct.title : ""}
      />
      <ToastContainer />
    </div>
  );
};

export default ListTable;
 
--- End of D:\Proj\react-table\src\components\ListTable.jsx --- 
 
--- Start of D:\Proj\react-table\src\components\Login.jsx --- 
import React, { useContext, useState } from "react";
import { UserContext } from "../contexts/UserContext";
import "../styles/Login.css";
import { useNavigate } from "react-router-dom";

const Login = () => {
  const { setUsername } = useContext(UserContext);
  const [inputUsername, setInputUsername] = useState("");
  const [inputPassword, setInputPassword] = useState("");
  const navigate = useNavigate();

  const handleLogin = () => {
    const storedUser = localStorage.getItem("username");
    const storedPass = localStorage.getItem("password");

    if (inputUsername === storedUser && inputPassword === storedPass) {
      setUsername(inputUsername);
      navigate("/store");
    } else {
      alert("Invalid username or password.");
    }
  };

  const handleSignUp = () => {
    navigate("/register");
  }

  return (
    <div className="login-container">
      <h2 className="heading">Login</h2>
      <input
        type="text"
        placeholder="Enter your username"
        value={inputUsername}
        onChange={(e) => setInputUsername(e.target.value)}
        className="username-input"
      />
      <input
        type="password"
        placeholder="Enter your password"
        value={inputPassword}
        onChange={(e) => setInputPassword(e.target.value)}
        className="password-input"
      />
      <button onClick={handleLogin} className="login-button">
        Login
      </button>
      <button onClick={handleSignUp} className="login-button">
        Sign Up
      </button>
    </div>
  );
};

export default Login;
 
--- End of D:\Proj\react-table\src\components\Login.jsx --- 
 
--- Start of D:\Proj\react-table\src\components\Register.jsx --- 
import React, { useState } from "react";
import "../styles/Register.css";
import { useNavigate } from "react-router-dom";

const Register = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const navigate = useNavigate();

  const handleRegister = () => {
    if (password !== confirmPassword) {
      alert("Passwords do not match.");
      return;
    }

    localStorage.setItem("username", username);
    localStorage.setItem("password", password);
    alert("Registration successful! Please login.");
    navigate("/");
  };

  return (
    <div className="register-container">
      <h2 className="heading">Register</h2>
      <input
        type="text"
        placeholder="Enter a username"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        className="username-input"
      />
      <input
        type="password"
        placeholder="Enter a password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        className="password-input"
      />
      <input
        type="password"
        placeholder="Confirm your password"
        value={confirmPassword}
        onChange={(e) => setConfirmPassword(e.target.value)}
        className="confirm-password-input"
      />
      <button onClick={handleRegister} className="register-button">
        Register
      </button>
    </div>
  );
};

export default Register;
 
--- End of D:\Proj\react-table\src\components\Register.jsx --- 
 
--- Start of D:\Proj\react-table\src\components\Store.jsx --- 
import React from "react";
import Header from "./Header";
import ListTable from "./ListTable";

const Store = () => {
  return (
    <div>
      <Header />
      <h2 className='heading'>Sagnik Store</h2>
      <ListTable />
    </div>
  );
};

export default Store;
 
--- End of D:\Proj\react-table\src\components\Store.jsx --- 
 
--- Start of D:\Proj\react-table\src\contexts\UserContext.js --- 
import React, { createContext, useState } from "react";

export const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [username, setUsername] = useState("");

  return (
    <UserContext.Provider value={{ username, setUsername }}>
      {children}
    </UserContext.Provider>
  );
};
 
--- End of D:\Proj\react-table\src\contexts\UserContext.js --- 
 
--- Start of D:\Proj\react-table\src\styles\Header.css --- 
.header-container {
    width: 100vw;
    height: 7vh;
    display: flex;
    justify-content: space-between;
    padding: 5vh 10vw;
}

.thr-err-btn {
    margin-right: 10px;
}

.username {
    font-size: 1.5em;
} 
--- End of D:\Proj\react-table\src\styles\Header.css --- 
 
--- Start of D:\Proj\react-table\src\styles\ListTable.css --- 
.container {
  padding: 0 10vw;
  font-family: Abel;
}

.table th {
  background-color: #2196e4;
}

.product-image {
  height: 75px;
  mix-blend-mode: multiply;
}

.product-image {
  transition: transform 0.5s ease;
}

.product-image:hover {
  transform: scale(1.5);
}

.cart-button {
  width: 5vw;
}
 
--- End of D:\Proj\react-table\src\styles\ListTable.css --- 
 
--- Start of D:\Proj\react-table\src\styles\Login.css --- 
.login-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #bde0fe;
}

.username-input {
  margin: 1rem 0;
  padding: 0.5rem;
  font-size: 1.2rem;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.login-button {
  padding: 0.5rem 1rem;
  margin: 2vh 0;
  font-size: 1rem;
  background-color: #2196e4;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.login-button:hover {
  background-color: #1769aa;
}
 
--- End of D:\Proj\react-table\src\styles\Login.css --- 
 
--- Start of D:\Proj\react-table\src\styles\Register.css --- 
.register-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #bde0fe;
}

.username-input,
.password-input,
.confirm-password-input {
  margin: 1rem 0;
  padding: 0.5rem;
  font-size: 1.2rem;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.register-button {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  background-color: #2196e4;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.register-button:hover {
  background-color: #1769aa;
}
 
--- End of D:\Proj\react-table\src\styles\Register.css --- 
 
--- Start of D:\Proj\react-table\src\utils\Errorboundry.js --- 
import React from "react";

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: "", errorInfo: "" };
  }

  componentDidCatch(error, errorInfo) {
    // You can also log the error to an error reporting service
    this.setState({ ...this.state, error: error, errorInfo: errorInfo });
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return (
        <>
          <h1>Something went wrong.</h1>
          <br />
          <h5>Error Details:</h5>
          <hr />
          <p>{this.state.errorInfo}</p>
        </>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary; 
--- End of D:\Proj\react-table\src\utils\Errorboundry.js --- 
 
